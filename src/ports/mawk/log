Binary file version.o matches
Binary file rexp/rexp.o matches
Binary file rexp/rexp1.o matches
rexp/rexp0.c: *Allow []...] and [^]...] to put ] in a class.
rexp/rexp0.c:   /* []...]  puts ] in a class
rexp/rexp0.c:      [^]..]  negates a class with ]
rexp/Makefile:#CFLAGS = -O -lm -DMAWK -I..
rexp/Makefile:CFLAGS = -lm -DMAWK -I.. -O2 -g -fomit-frame-pointer -fno-common -fno-builtin -Wall -mswp-byte-writes -DCONFIG_NDS_ROM8BIT -mcpu=arm946e-s -mfpu=fpe3 -DEMBED -D__PIC__ -fpic -msingle-pic-base -Dlinux -D__linux__ -Dunix -D__uClinux__
Binary file rexp/rexp2.o matches
Binary file rexp/rexp3.o matches
cast.c: *   Fix small bozo in rt_error("overflow converting ...")
init.c:     The type of ARGV[1] ... should be C_MBSTRN
Binary file print.o matches
Binary file hash.o matches
CHANGES:2) []...] and [^]...] put ] in a class (or not in a class) without
execute.c:		  /* its a real field $1, $2 ...
vargs.h:#define  VA_ALIST(type, arg)  (type arg, ...) {
vargs.h:#define  VA_ALIST2(t1,a1,t2,a2)  (t1 a1,t2 a2,...) {
files.c:   32 or 48 ..., open files then the last one doesn't get flushed on
configure:  --quiet, --silent       do not print \`checking...' messages
configure:  --srcdir=DIR            find the sources in DIR [configure dir or ..]
configure:# 6 checking for... messages and results
configure:    srcdir=..
configure:    { echo "configure: error: can not find sources in $ac_confdir or .." 1>&2; exit 1; }
configure:echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
configure:echo $ac_n "checking whether we are using GNU C""... $ac_c" 1>&6
configure:echo $ac_n "checking how to run the C preprocessor""... $ac_c" 1>&6
configure:echo $ac_n "checking for -lm""... $ac_c" 1>&6
configure:echo $ac_n "checking for log""... $ac_c" 1>&6
configure:echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
configure:echo $ac_n "checking compiler supports void*""... $ac_c" 1>&6
configure:echo $ac_n "checking compiler groks prototypes""... $ac_c" 1>&6
configure:echo $ac_n "checking for working const""... $ac_c" 1>&6
configure:echo $ac_n "checking for stddef.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for sys/types.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for fcntl.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for errno.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for time.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for stdarg.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for memcpy""... $ac_c" 1>&6
configure:echo $ac_n "checking for strchr""... $ac_c" 1>&6
configure:echo $ac_n "checking for strerror""... $ac_c" 1>&6
configure:echo $ac_n "checking for vfprintf""... $ac_c" 1>&6
configure:echo $ac_n "checking for strtod""... $ac_c" 1>&6
configure:echo $ac_n "checking for fmod""... $ac_c" 1>&6
configure:echo $ac_n "checking for matherr""... $ac_c" 1>&6
configure:echo $ac_n "checking for limits.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for values.h""... $ac_c" 1>&6
configure:echo $ac_n "checking whether cross-compiling""... $ac_c" 1>&6
configure:echo $ac_n "checking return type of signal handlers""... $ac_c" 1>&6
configure:echo $ac_n "checking for sigaction""... $ac_c" 1>&6
configure:echo $ac_n "checking for siginfo.h""... $ac_c" 1>&6
configure:   echo $ac_n "checking for sigvec""... $ac_c" 1>&6
configure:echo $ac_n "checking for ieeefp.h""... $ac_c" 1>&6
configure:echo $ac_n "checking for fpsetmask""... $ac_c" 1>&6
configure:echo $ac_n "checking for sigaction""... $ac_c" 1>&6
configure:echo $ac_n "checking for siginfo.h""... $ac_c" 1>&6
configure:   echo $ac_n "checking for sigvec""... $ac_c" 1>&6
configure:echo $ac_n "checking strtod bug on overflow""... $ac_c" 1>&6
configure:      echo $ac_n "checking for sigaction""... $ac_c" 1>&6
configure:echo $ac_n "checking for siginfo.h""... $ac_c" 1>&6
configure:   echo $ac_n "checking for sigvec""... $ac_c" 1>&6
configure:for ac_file in .. $CONFIG_FILES; do if test "x$ac_file" != x..; then
configure:    # A "../" for each directory in $ac_dir_suffix.
configure:    ac_dots=`echo $ac_dir_suffix|sed 's%/[^/]*%../%g'`
array.h:   short type ;  /* values in AY_NULL .. AY_SPLIT */
mawk.h:void  PROTO( rt_error, ( char *, ...) ) ;
mawk.h:void PROTO( errmsg , (int, char*, ...) ) ;
mawk.h:void PROTO( compile_error, ( char *, ...) ) ;
field.c:/* split field[0] into $1, $2 ... and set NF  */
field.c:      default:			/* $1 or $2 or ... */
field.c:  $(MAX_FIELD+1) ... are on the split_ov_list.
scan.c:			    "runaway string constant \"%.10s ...",
scan.c:			    "runaway regular expression /%.10s ...",
print.c:int PROTO(fprintf, (FILE *, const char *,...)) ;
print.c:int PROTO(sprintf, (char *, const char *,...)) ;
print.c:typedef int (*PRINTER) (PTR, const char *,...) ;
man/mawk.1:[\-\|\-] 'program text' [file ...]
man/mawk.1:[\-\|\-] [file ...]
man/mawk.1:actions or loop bodies are blocked via { ... } as in C.  The
man/mawk.1:.TP \w'[^c\d1\uc\d2\uc\d3\u...]'u+1n
man/mawk.1:[c\d1\uc\d2\uc\d3\u...]
man/mawk.1:c\d1\uc\d2\uc\d3\u... .  An interval of characters is denoted
man/mawk.1:c\d1\u\-c\d2\u inside a class [...].
man/mawk.1:[^c\d1\uc\d2\uc\d3\u...]
man/mawk.1:c\d1\uc\d2\uc\d3\u...
man/mawk.1:.TP \w'[^c\d1\uc\d2\uc\d3\u...]'u+1n
man/mawk.1:.BR $2 ", ...,"
man/mawk.1:array of command line arguments, 0..ARGC-1.
man/mawk.1:print \*(ex\d1\u, \*(ex\d2\u, ..., \*(ex\dn\u
man/mawk.1:\*(ex\d1\u \fBOFS \*(ex\d2\u \fBOFS\fR ... \*(ex\dn\u
man/mawk.1:A[1], A[2], ..., A[n] and split() returns n, the number
man/mawk.1:\fB$2\fR,...,
man/mawk.1:\fBARGV[1]\fR ... 
man/mawk.1:.BR ARGV[1]  " ... 
man/mawk.1:	#insertion sort of A[1..n]
man/mawk.doc:     text' [file ...]
man/mawk.doc:     [--] [file ...]
man/mawk.doc:     blocked via { ... } as in C.  The last statement in a  block
man/mawk.doc:          [c1c2c3...]  matches  any  character   in   the   class
man/mawk.doc:                       c1c2c3...  .  An interval of characters is
man/mawk.doc:                       denoted c1-c2 inside a class [...].
man/mawk.doc:          [^c1c2c3...] matches any character  not  in  the  class
man/mawk.doc:                       c1c2c3...
man/mawk.doc:     stored in $1, $2, ..., $NF.  The built-in variable NF is set
man/mawk.doc:          ARGV      array of command line arguments, 0..ARGC-1.
man/mawk.doc:          print _e_x_p_r1, _e_x_p_r2, ..., _e_x_p_rn
man/mawk.doc:               writes _e_x_p_r1 OFS _e_x_p_r2 OFS ... _e_x_p_rn ORS to  stan-
man/mawk.doc:               A[2], ..., A[n] and split() returns n, the  number
man/mawk.doc:     pieces  are loaded into $1, $2,..., $NF.  If $0 is empty, NF
man/mawk.doc:     is  set  the  name  of  the  AWK interpreter and ARGV[1] ...
man/mawk.doc:     else  the command line arguments  ARGV[1]  ...  ARGV[ARGC-1]
man/mawk.doc:          #insertion sort of A[1..n]
Binary file scan.o matches
Binary file mawk.gdb matches
Makefile:	$(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS) -DMAWK -I.." 
Binary file awk matches
examples/decl.awk:#               doesn't understand struct {...}
examples/decl.awk:  x = gobble("[* ]+")   # get list of *** ...
examples/ct_length.awk:     printf "%s" , substr($0,1, i+5)  # ...length
examples/gdecl.awk:  x = gobble("[* ]+")   # get list of *** ...
zmalloc.c:/* ZBLOCKS of sizes 1, 2, ... 16
zmalloc.c:   which is bytes of sizes 8, 16, ... , 128
zmalloc.c:   pool[0], pool[1], ... , pool[15]
Makefile.in:	$(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS) -DMAWK -I.." 
Binary file re_cmpl.o matches
README:	      an awk program started with #!/.../mawk
README:     into $1,$2 ...
Binary file mawk matches
Binary file matherr.o matches
array.c:   CELL *cells ; /* storage for A[1..cnt] */
test/mawktest:mawk -f ../examples/decl.awk $dat | cmp -s - decl-awk.out || exit 
test/fpe_test.bat:..\mawk -f fpetest1.awk
test/fpe_test.bat:..\mawk -f fpetest2.awk
test/fpe_test.bat:..\mawk -f fpetest3.awk > temp$$
test/mawktest.v7:./mawk -f ../examples/decl.awk $dat | cmp -s - decl-awk.out || exit
test/mawktest.bat:..\mawk -Wv
test/mawktest.bat:..\mawk -f wc.awk %dat% > temp$$
test/mawktest.bat:..\mawk -f reg0.awk %dat% > temp$$
test/mawktest.bat:..\mawk -f reg1.awk %dat% >> temp$$
test/mawktest.bat:..\mawk -f reg2.awk %dat% >> temp$$
test/mawktest.bat:..\mawk -f wfrq0.awk %dat% > temp$$
test/mawktest.bat:..\mawk -f ../examples/decl.awk %dat% > temp$$
Binary file split.o matches
array.w:   short type ;  /* values in AY_NULL .. AY_SPLIT */
array.w:values $A[1..{\it cnt}]$ are copied from the array 
array.w:${\it split\_buff}[0..{\it cnt}-1]$.
array.w:of ${\it sp}[1-cnt..0]$, with each element separated by [[SUBSEP]], to
array.w:integer valued, then convert to string with [[sprintf(CONVFMT,...)]] and
array.w:   CELL *cells ; /* storage for A[1..cnt] */
array.w:[[cells[MAX_SPLIT..cnt-1]]] from this list.
field.h:	/* $0, $1 ... $(MAX_SPLIT), NF, RS, RS, CONVFMT, OFMT */
field.h:   even though it's constant so ...
config.status:for ac_file in .. $CONFIG_FILES; do if test "x$ac_file" != x..; then
config.status:    # A "../" for each directory in $ac_dir_suffix.
config.status:    ac_dots=`echo $ac_dir_suffix|sed 's%/[^/]*%../%g'`
